// ******************************************************************************
// YAYA　ゴーストテンプレート
// 種々のイベント辞書
// ******************************************************************************

// ******************************************************************************
// シェル切り替え
// ******************************************************************************

// ------------------------------------------------------------------------------
// シェルチェンジ開始
// ------------------------------------------------------------------------------

OnShellChanging
{
    '\u\s[10]\h\s[123]着替えてくるか。\w9\w9\w9\e'
}

// ------------------------------------------------------------------------------
// シェルチェンジ完了
// ------------------------------------------------------------------------------
OnShellChanged
{
    '\u\s[10]\h\s[122]よし。\w9\w9\e'
}

// ******************************************************************************
// インストール関連
// ******************************************************************************

// ------------------------------------------------------------------------------
// インストール中のメッセージ
// ------------------------------------------------------------------------------
OnInstallBegin
{
    '\h\_q(インストール中)\_q'
}

// ------------------------------------------------------------------------------
// インストール完了メッセージ
// ------------------------------------------------------------------------------
OnInstallComplete
{
    // 識別子
    _ids = SPLIT(reference[0], ' with ')
    _ids = SPLIT(_ids[0], SPLIT(_ids[1], ','))
    _ref_ids = JOIN(_ids, CHR(1))

    // 名前
    _ref_names = reference[1]
    if STRLEN(reference[2]) > 0 {
        _ref_names += CHR(1) + reference[2]
    }

    _ref_ids = SHIORI3FW.EscapeAllTags(_ref_ids)
    _ref_names = SHIORI3FW.EscapeAllTags(_ref_names)

    "\![raise,OnInstallCompleteEx,%(_ref_ids),%(_ref_names)]"
}

OnInstallCompleteEx
{
    _ids = SPLIT(reference[0], CHR(1))
    _names = SPLIT(reference[1], CHR(1))
    _ids_len = ARRAYSIZE(_ids)
    _names_len = ARRAYSIZE(_names)
    _len = 0

    if _ids_len < _names_len {
        _len = _ids_len
    }
    else {
        _len = _names_len
    }

    _installs_str = ''
    _last_id = ''
    _last_name = ''

    for _i = 0; _i < _len; _i++ {
        _suffix_str = ''
        _installs_str += '\![*]'

        case _ids[_i] {
        when 'shell' {
            _installs_str += 'シェル'
            _suffix_str = InstallComplete.change_and_call(_ids[_i], _names[_i])
            if _last_name == '' {
                _last_id = _ids[_i]
                _last_name = _names[_i]
            }
        }
        when 'ghost' {
            _installs_str += 'ゴースト'
            _suffix_str = InstallComplete.change_and_call(_ids[_i], _names[_i])

            _last_id = _ids[_i]
            _last_name = _names[_i]
        }
        when 'balloon' {
            _installs_str += 'バルーン'
            _suffix_str = InstallComplete.change_and_call(_ids[_i], _names[_i])
            if _last_name == '' {
                _last_id = _ids[_i]
                _last_name = _names[_i]
            }
        }
        when 'plugin' {
            _installs_str += 'プラグイン'
        }
        when 'headline' {
            _installs_str += 'ヘッドライン'
        }
        when 'rss' {
            _installs_str += 'RSS'
        }
        when 'supplement' {
            _installs_str += 'サプリメント'
        }
        when 'calendar skin' {
            _installs_str += 'カレンダースキン'
        }
        when 'calendar plugin' {
            _installs_str += 'カレンダープラグイン'
        }
        when 'package' {
            _installs_str += 'パッケージ'
        }
        when 'language' {
            _installs_str += '言語パック'
        }
        others {
            _installs_str += SHIORI3FW.EscapeAllTags(_ids[_i])
        }
        }

        if STRLEN(_names[_i]) > 0 {
            _installs_str += ' - ' + SHIORI3FW.EscapeAllTags(_names[_i])
        }
        _installs_str += _suffix_str + '\n'
    }

    _last_id = SHIORI3FW.EscapeAllTags(_last_id)
    _last_name = SHIORI3FW.EscapeAllTags(_last_name)

    _lastinstall_str = ''
    if _last_name != '' {
        _lastinstall_str = AYATEMPLATE.MenuItem('切り替え', 'On_InstallComplete.change', _last_id, _last_name)
        if _last_id == 'ghost' {
            _lastinstall_str += AYATEMPLATE.MenuItem('呼び出す', 'On_InstallComplete.call', _last_id, _last_name)
        }
    }

    "\h\_q(インストール完了)\n\_q"
    --
    "\_q%(_installs_str)\n\_q"
    --
    _lastinstall_str
    --
    AYATEMPLATE.MenuItem('閉じる', 'CLOSE_NOTALK')
}

InstallComplete.change_and_call
{
    _id = SHIORI3FW.EscapeAllTags(_argv[0])
    _name = SHIORI3FW.EscapeAllTags(_argv[1])

    '('
    --
    "\q[切替,On_InstallComplete.change,%(_id),%(_name)]"
    --
    if _id == 'ghost' {
        " \q[呼出,On_InstallComplete.call,%(_id),%(_name)]"
    }
    --
    ')'
}

On_InstallComplete.change
{
    _id = SHIORI3FW.EscapeAllTags(reference[0])
    _name = SHIORI3FW.EscapeAllTags(reference[1])
    if _id == 'ghost' || _id == 'balloon' {
        "\![change,%(_id),%(_name),--option=raise-event]"
    }
    else {
        "\![change,%(_id),%(_name)]"
    }
}

On_InstallComplete.call
{
    _id = SHIORI3FW.EscapeAllTags(reference[0])
    _name = SHIORI3FW.EscapeAllTags(reference[1])
    if _id == 'ghost' {
        "\![call,%(_id),%(_name),--option=raise-event]"
    }
    else {
        "\![call,%(_id),%(_name)]"
    }
}

// ------------------------------------------------------------------------------
// インストール失敗メッセージ
// ------------------------------------------------------------------------------
OnInstallFailure
{
    if reference[0] == 'artificial' {
        '\h\_q(インストールを中止しました)\_q'
    }
    else {
        '\h\_q(インストールが失敗しました)\n'
        --
        case reference[0] {
        when 'unlar32' {
            '(lzh形式用dllのロードに失敗しました)'
        }
        when 'extraction' {
            '(解凍に失敗しました。ファイルが破損している可能性があります)'
        }
        when 'invalid type' {
            '(アーカイブのinstall.txtに不備があります)'
        }
        when 'password' {
            '(パスワードに誤りがあります)'
        }
        when 'unsupported' {
            '(サポートしていないタイプです)'
        }
        others {
            '(不明なエラーです)'
        }
        }
        --
        '\_q'
    }
    --
    '\e'
}

// ------------------------------------------------------------------------------
// インストール拒否（他のゴーストのためのアーカイブだった）
// ------------------------------------------------------------------------------
OnInstallRefuse
{
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])
    "\h\_q(インストール中断)\n(「%(_escaped_name)」用のアーカイブです)\_q\e"
}

OnInstallReroute
{
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])
    "\h\_q(インストール移譲)\n(「%(_escaped_name)」に移譲します)\_q\e"
}

// ******************************************************************************
// メールチェック
// ******************************************************************************

// ------------------------------------------------------------------------------
// メールチェック開始
// ------------------------------------------------------------------------------
OnBIFFBegin
{
    _server = SHIORI3FW.EscapeAllTags(reference[2])
    "\h\_q(メールチェック開始)\n\n[half]\![*]%(_server)\_q\e"
}

// ------------------------------------------------------------------------------
// メールチェック成功
// ------------------------------------------------------------------------------
OnBIFFComplete
{
    _old = TOINT(reference[0])
    _server = SHIORI3FW.EscapeAllTags(reference[2])
    _new = TOINT(reference[3])

    '\h\_q'
    --
    "(メールチェック終了)\n\n[half]\![*]%(_server)\n"
    --
    "(既存: %(_old)通)\n"
    --
    "(新着: %(_new)通)\n"
    --
    '\_q\e'
}

// ------------------------------------------------------------------------------
// メールチェック失敗
// ------------------------------------------------------------------------------
OnBIFFFailure
{
    _server = SHIORI3FW.EscapeAllTags(reference[2])

    '\h\_q'
    --
    "(メールチェック失敗)\n\n[half]\![*]%(_server)\n"
    --
    case reference[0] {
    when 'defect' {
        '(設定を確認して下さい)'
    }
    when 'kick' {
        '(パスワードを確認して下さい)'
    }
    when 'timeout' {
        '(サーバーが混雑しているか、サーバー設定に誤りがあります)'
    }
    others {
        _reason = SHIORI3FW.EscapeAllTags(reference[0])
        "(失敗理由: %(_reason))"
    }
    }
    --
    '\_q\e'
}

// ******************************************************************************
// ネットワーク更新
// ******************************************************************************

// ------------------------------------------------------------------------------
// ネットワーク更新開始
// ------------------------------------------------------------------------------
OnUpdateBegin
{
    '\u\s[10]\h\_q(ネットワーク更新確認)\n\_q\e'
}

// ------------------------------------------------------------------------------
// ネットワーク更新準備完了
// ------------------------------------------------------------------------------
OnUpdateReady
{
    // _file_number = TOINT(reference[0]) + 1

    '\1\s[10]\h\_q(ネットワーク更新開始)\n\_q'
    --
    '\e'
}

// ------------------------------------------------------------------------------
// ネットワーク更新終了
// ------------------------------------------------------------------------------
OnUpdateComplete
{
    '\u\s[10]\h'
    --
    '\_q(ネットワーク更新終了)\n\_q'
    --
    if reference[0] == 'none' {
        // ---- 更新すべきファイルが無かった
        '\_q(更新はありませんでした)\_q'
    }
    else {
        // ---- 実際に更新が完了した
        '\_q(更新完了)\_q'
    }
    --
    '\e'
}

// ------------------------------------------------------------------------------
// ネットワーク更新失敗
// ------------------------------------------------------------------------------
OnUpdateFailure
{
    '\u\s[10]\h'
    --
    '\_q(ネットワーク更新失敗)\n'
    --
    case reference[0] {
    when 'timeout' {
        '(タイムアウトしました)'
    }
    when 'md5 miss' {
        '(MD5が一致しませんでした)'
    }
    when 'fileio' {
        '(容量不足です)'
    }
    when 'virusdetect' {
        '(ウィルスを検知した可能性があります)'
    }
    when 'toomanyredirect' {
        '(リダイレクトが多すぎました)'
    }
    when 'executing' {
        '(更新はすでに実行されています)'
    }
    when 'paramerror' {
        '(更新実行時のタグの設定に誤りがあります)'
    }
    others {
        _reason = SHIORI3FW.EscapeAllTags(reference[0])
        "(失敗理由: %(_reason))"
    }
    }
    --
    '\n\n\_q'
    --
    '\e'
}

// ------------------------------------------------------------------------------
// ネットワーク更新 ダウンロード開始
// ------------------------------------------------------------------------------
OnUpdate.OnDownloadBegin
{
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])

    '\u\s[10]\h'
    --
    "\_q(ネットワーク更新中)\n(ファイル「%(_escaped_name)」をダウンロードします。)\n\_q"
    --
    '\e'
}

// ------------------------------------------------------------------------------
// ネットワーク更新 MD5値照合開始
// ------------------------------------------------------------------------------
// OnUpdate.OnMD5CompareBegin
// {
// '\0\s[5]ファイルの確認ー。\w8\e'
// '\0\s[1]合ってるかな‥\w5‥\w5\w8\1\e'
// }

// ------------------------------------------------------------------------------
// ネットワーク更新 MD5値一致
// ------------------------------------------------------------------------------
// OnUpdate.OnMD5CompareComplete
// {
// '\0\s[5]ん、オッケー。\e'
// '\0\s[5]いいみたいだね。\1\s[10]うむ。\e'
// }

// ------------------------------------------------------------------------------
// ネットワーク更新 MD5値不一致
// ------------------------------------------------------------------------------
OnUpdate.OnMD5CompareFailure
{
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])

    '\u\s[10]\h'
    --
    "\_q(ネットワーク更新中)\n(ファイル「%(_escaped_name)」のMD5が一致しません)\n(データを破棄します)\n\_q"
    --
    '\e'
}

// ******************************************************************************
// ヘッドラインセンス
// ******************************************************************************

// ------------------------------------------------------------------------------
// ヘッドラインセンス開始
// ------------------------------------------------------------------------------
OnHeadlinesenseBegin
{
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])
    '\u\s[10]\h'
    --
    "\_q(ヘッドライン取得中)\n\![*]%(_escaped_name)\n\_q"
    --
    '\e'
}

// ------------------------------------------------------------------------------
// ヘッドライン読み上げ
// ------------------------------------------------------------------------------
OnHeadlinesense.OnFind
{
    '\u\s[10]\h\b2'
    --
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])
    // ---- はじめのセリフ
    if reference[2] == "First" || reference[2] == "First and Last" {
        // ---- 最初のページ
        "\_q(ヘッドライン: %(_escaped_name))\_q"
    }
    elseif reference[2] == 'Next' {
        // ---- 真ん中あたりのページ
        "\_q(ヘッドライン: %(_escaped_name) 承前)\_q"
    }
    elseif reference[2] == 'Last' {
        // ---- 最後のページ
        "\_q(ヘッドライン: %(_escaped_name) 最終頁)\_q"
    }
    --
    // ---- ヘッドライン本体
    "\n\n%(reference[3])\n"
    --
    // ---- 選択肢
    if reference[2] == "First" || reference[2] == "Next" {
        // ---- 次のページがある場合
        AYATEMPLATE.MenuItem("次頁", "")
    }
    --
    AYATEMPLATE.MenuItem('サイトへ', reference[1])
    --
    AYATEMPLATE.MenuItem('閉じる', 'CLOSE_NOTALK', 150)
}

// ------------------------------------------------------------------------------
// ヘッドライン更新が無かった
// ------------------------------------------------------------------------------
OnHeadlinesenseComplete
{
    _escaped_name = SHIORI3FW.EscapeAllTags(reference[0])
    "\0\_q(ヘッドライン: %(_escaped_name) 更新なし)\_q\e"
}

// ------------------------------------------------------------------------------
// ヘッドラインセンス失敗
// ------------------------------------------------------------------------------
OnHeadlinesenseFailure
{
    '\h\_q(ヘッドラインセンス: 失敗しました)\n'
    --
    if reference[0] == "can't download" {
        '(ダウンロード失敗)'
    }
    elseif reference[0] == "can't analyze" {
        '(ヘッドライン解析失敗)'
    }
    else {
        '(不明なエラーです)'
    }
    --
    '\_q\e'
}

// ******************************************************************************
// ファイル作成関連
// ******************************************************************************

// ------------------------------------------------------------------------------
// updates2.dau作成開始
// ------------------------------------------------------------------------------
OnUpdatedataCreating
{
    '\h\_q(アップデートデータ作成)\_q\e'
}

// ------------------------------------------------------------------------------
// updates2.dau作成完了
// ------------------------------------------------------------------------------
OnUpdatedataCreated
{
    '\h\_q(アップデートデータ作成完了)\_q\e'
}

// ------------------------------------------------------------------------------
// NAR作成開始
// ------------------------------------------------------------------------------
OnNarCreating
{
    '\h\_q(narファイル作成中)\_q\e'
}

// ------------------------------------------------------------------------------
// NAR作成完了
// ------------------------------------------------------------------------------
OnNarCreated
{
    _target = SHIORI3FW.EscapeAllTags(reference[0])
    _result = SHIORI3FW.EscapeAllTags(reference[1])
    "\h\_q(「%(_target)」のnarファイル)\n(「%(_result)」作成完了)\_q\e"
}

// ******************************************************************************
// 時計合わせ
// みか (http://homepage2.nifty.com/ko-ki/) の辞書を参考にしました。感謝＞こーき氏
// ******************************************************************************

// ------------------------------------------------------------------------------
// 時計合わせ開始
// ------------------------------------------------------------------------------
OnSNTPBegin
{
    "\h\_q(時計合わせ実行)\n(%(SHIORI3FW.EscapeAllTags(reference[0]))に接続)\_q\e"
}

// ------------------------------------------------------------------------------
// 時刻取得成功、比較開始
// この関数で 2008/03/25 19:15:05 のように見やすい形に作り変えます。
// 詳しくはSTRFORM関数の説明を見てね！
// わからなければこのままで。
// ------------------------------------------------------------------------------

SNTPCompare_StrForm
{
    _txt = SPLIT(_argv[0], ',')
    STRFORM('$04d/$02d/$02d $02d:$02d:$02d', TOINT(_txt[0]), TOINT(_txt[1]), TOINT(_txt[2]), TOINT(_txt[3]), TOINT(_txt[4]), TOINT(_txt[5]))
}

OnSNTPCompare
{
    '\h\_q'
    --
    "修正前 %(SNTPCompare_StrForm(reference[2]))\n"
    --
    "修正後 %(SNTPCompare_StrForm(reference[1]))\n"
    --
    '\_q'
    --
    // \6は補正実行タグ。消しちゃだめ
    "\6\h\_q\n(%(SHIORI3FW.EscapeAllTags(reference[3]))秒のずれを修正)\_q\e"
}

// ------------------------------------------------------------------------------
// 時計合わせ失敗
// ------------------------------------------------------------------------------
OnSNTPFailure
{
    "\h\_q(時計合わせ失敗)\n(%(SHIORI3FW.EscapeAllTags(reference[0]))への接続に失敗)\_q\e"
}

// ******************************************************************************
// そのほか
// ******************************************************************************

// ------------------------------------------------------------------------------
// ディスプレイ解像度変更
// ------------------------------------------------------------------------------
// OnDisplayChange
// {
// // ---- 変数にディスプレイ解像度と色深度に関する情報を取得
// // ---- 使うかどうかは分からないがとりあえず保持しておく
// displaybpp = reference[0]
// displaywidth = reference[1]
// displayheight = reference[2]
// SHIORI3FW.RegisterTempVar('displaybpp', 'displaywidth', 'displayheight')
// }

// ------------------------------------------------------------------------------
// URLドロップ
// CROW でゴーストインストーラからゴーストをインストールを始めた時にも呼ばれます
// ------------------------------------------------------------------------------
OnURLDropping
{
    "\h\_q(%(SHIORI3FW.EscapeAllTags(reference[0]))からデータを取得中)\_q\e"
}

// ------------------------------------------------------------------------------
// 起動時に MATERIA を検出
// ------------------------------------------------------------------------------
// OnEmbryoExist
// {
// '\0\s[0]あれ、「伺か」が起動してるよ。\w8\1ありがたやありがたや。\w8\0\s[4]\n\nなんで拝むの？\e'
// }

// ------------------------------------------------------------------------------
// 起動時に猫どりふを検出
// ------------------------------------------------------------------------------
// OnNekodorifExist
// {
// '\0\s[2]うわ、猫どりふだ‥\w5‥\w5\w8\1\s[11]まだあったのか！\w8\0\s[4]\n\nえ、そこが問題なの？\e'
// }

// ------------------------------------------------------------------------------
// スクリーンセーバー実行開始
// ------------------------------------------------------------------------------
// OnScreenSaverStart
// {
// '\0\s[5]画面の焼き付きを保護する開始っ！\w8\e'
// }

// ------------------------------------------------------------------------------
// スクリーンセーバー実行終了
// ------------------------------------------------------------------------------
// OnScreenSaverEnd
// {
// '\1\s[10]‥\w5‥\w5ややめ、起きろ。\w9\nスクリーンセーバーが無くなったぞ。\w8\0\s[2]わ、いつの間に‥\w5‥\w5\e'
// }

// ===================================================================
// インプットボックス
// ===================================================================
OnUserInputCancel
{
    if ISFUNC("%(reference[0]).cancel") {
        EVAL("%(reference[0]).cancel")
    }
}

// ===================================================================
// アンカー
// ===================================================================
OnAnchorSelectEx
{
    SHIORI3FW.RegisterTempVar('anchor_callback')
    if RE_SEARCH(reference[1], '^(http|https)://') {
        // urlの場合はOnAnhorSelectにフォールバック
        return
    }
    else {
        if ISFUNC(reference[1]) {
            EVAL(reference[1])
            --
            if anchor_callback == '' {
                AYATEMPLATE.MenuItem('戻る', 'Menu_LASTTALK', 150)
            }
            else {
                _temp_anchor_callback = anchor_callback
                anchor_callback = ''
                AYATEMPLATE.MenuItem('戻る', _temp_anchor_callback, 150)
            }
            --
            AYATEMPLATE.MenuItem('閉じる', 'On_Anchor.list.close')
        }
    }
}

// ******************************************************************************
// キーが押された
// ******************************************************************************
// ------------------------------------------------------------------------------
// OnKeyPressイベント
// ------------------------------------------------------------------------------
// キーボードの任意のキーが押されたときに発動するイベントです。
// ファンクションキーを指定するときは、'f1'等と指定します。
// 押されたキーはreference0に格納されます。
// if文、もしくはcase~when文で分岐させると良いでしょう。

OnKeyPress
{
    case reference[0] {
    when 't' {
        OnAiTalk
    }
    when 'm' {
        if ISFUNC('OpenMenu') {
            OpenMenu
        }
        else {
            '\![raise,OnMouseDoubleClick,0,0,0,0,__SYSTEM_KEYDOWN_COL,0,mouse]'
        }
    }
    }
}

// ******************************************************************************
// サーフィス復元
// ******************************************************************************

// ------------------------------------------------------------------------------
// OnSurfaceRestoreイベント
// ------------------------------------------------------------------------------
OnSurfaceRestore
{
    '\h\s[100]'
    --
    '\u\s[10]'
    --
    '\p[2]\s[-1]'
    --
    '\e'
}

// ******************************************************************************
// トランスレータ
// ******************************************************************************

// ------------------------------------------------------------------------------
// OnTranslateイベント
// ------------------------------------------------------------------------------
// もっとも単純な例。語尾変え（「。」→「にゅ。」）。
// 動かないようにコメントアウトしています。
/* OnTranslate
{
	_text = reference[0]
	_text = REPLACE(_text, "。", "にゅ。")
	_text
} */

// ------------------------------------------------------------------------------
// OnTranslateInternalイベント
// ------------------------------------------------------------------------------
// OnTranslateがYAYA→本体→YAYAと、一度本体を経由するのに対して、
// OnTranslateInternalはYAYA内部でのトランスレートです。
// そのため、reference変数などが変更されない状態でこの関数に渡されます。
// 引数は、_argv[0]が、本体に渡す寸前のトークの内容です。
// 動かないようにコメントアウトしています。
/* OnTranslateInternal
{
	_text = _argv[0]
	_text = REPLACE(_text, "。", "にゅ。")
	_text
} */
